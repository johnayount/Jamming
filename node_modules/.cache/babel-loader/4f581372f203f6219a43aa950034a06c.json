{"ast":null,"code":"const clientId = '3f8581efcf054bc186cdc88d963edde3';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // access token match check\n\n\n    const accessTokenCheck = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInCheck = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenCheck && expiresInCheck) {\n      accessToken = accessTokenCheck[1];\n      const expiresIn = Number(expiresInCheck[1]); // This will allow new access token when previous one expires\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('accessToken', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    console.log(\"searching...\" + Json.stringify(term));\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer {accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenCheck","window","location","href","match","expiresInCheck","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","console","log","Json","stringify","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","userId","method","body","JSON","playlistId","uris"],"sources":["/Users/johnyount/Desktop/coding-projects/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId = '3f8581efcf054bc186cdc88d963edde3'\nconst redirectUri = 'http://localhost:3000/'\n\n\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        // access token match check\n        const accessTokenCheck = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInCheck = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenCheck && expiresInCheck) {\n            accessToken = accessTokenCheck[1];\n            const expiresIn = Number(expiresInCheck[1]);\n\n        // This will allow new access token when previous one expires\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('accessToken', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n        \n    },\n    search (term){\n        const accessToken = Spotify.getAccessToken();\n        console.log(\"searching...\" + Json.stringify(term));\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer {accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse=> {\n            if(!jsonResponse.tracks)  {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album:track.album.name,\n                uri:track.uri\n            }));\n        \n        });\n\n    },\n    savePlaylist(name, trackUris) {\n        if(!name || !trackUris){\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me',{headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId=jsonResponse.id;\n            return fetch(`https://api.spotify.com/1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId= jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                }\n                )\n            })\n        })\n    }\n\n    \n\n\n\n}\n\nexport default Spotify;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAIA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;EACZC,cAAc,GAAG;IACb,IAAIF,WAAJ,EAAiB;MACb,OAAOA,WAAP;IACH,CAHY,CAIb;;;IACA,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;IACA,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;IAEA,IAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;MACpCR,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;MACA,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFoC,CAIxC;;MAEIJ,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;MACAL,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,aAAzB,EAAwC,IAAxC,EAA8C,GAA9C;MACA,OAAOb,WAAP;IACH,CATD,MASO;MACH,MAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;MACAK,MAAM,CAACC,QAAP,GAAkBS,SAAlB;IACH;EAEJ,CAvBW;;EAwBZC,MAAM,CAAEC,IAAF,EAAO;IACT,MAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACAe,OAAO,CAACC,GAAR,CAAY,iBAAiBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;IACA,OAAOK,KAAK,CAAE,kDAAiDL,IAAK,EAAxD,EAA2D;MACnEM,OAAO,EAAE;QACLC,aAAa,EAAG;MADX;IAD0D,CAA3D,CAAL,CAIJC,IAJI,CAICC,QAAQ,IAAI;MAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACH,CANM,EAMJF,IANI,CAMCG,YAAY,IAAG;MACnB,IAAG,CAACA,YAAY,CAACC,MAAjB,EAA0B;QACtB,OAAO,EAAP;MACH;;MACD,OAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;QAC3CC,EAAE,EAAED,KAAK,CAACC,EADiC;QAE3CC,IAAI,EAAEF,KAAK,CAACE,IAF+B;QAG3CC,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHkB;QAI3CG,KAAK,EAACL,KAAK,CAACK,KAAN,CAAYH,IAJyB;QAK3CI,GAAG,EAACN,KAAK,CAACM;MALiC,CAAL,CAAnC,CAAP;IAQH,CAlBM,CAAP;EAoBH,CA/CW;;EAgDZC,YAAY,CAACL,IAAD,EAAOM,SAAP,EAAkB;IAC1B,IAAG,CAACN,IAAD,IAAS,CAACM,SAAb,EAAuB;MACnB;IACH;;IACD,MAAMvC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACA,MAAMoB,OAAO,GAAG;MAACC,aAAa,EAAG,UAASvB,WAAY;IAAtC,CAAhB;IACA,IAAIwC,MAAJ;IAEA,OAAOnB,KAAK,CAAC,+BAAD,EAAiC;MAACC,OAAO,EAAEA;IAAV,CAAjC,CAAL,CACLE,IADK,CACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADZ,EAELF,IAFK,CAEAG,YAAY,IAAI;MACnBa,MAAM,GAACb,YAAY,CAACK,EAApB;MACA,OAAOX,KAAK,CAAE,mCAAkCmB,MAAO,YAA3C,EACZ;QACIlB,OAAO,EAAEA,OADb;QAEImB,MAAM,EAAE,MAFZ;QAGIC,IAAI,EAAEC,IAAI,CAACvB,SAAL,CAAe;UAAEa,IAAI,EAAEA;QAAR,CAAf;MAHV,CADY,CAAL,CAKJT,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,EAMLF,IANK,CAMAG,YAAY,IAAI;QACnB,MAAMiB,UAAU,GAAEjB,YAAY,CAACK,EAA/B;QACA,OAAOX,KAAK,CAAE,oCAAmCmB,MAAO,cAAaI,UAAW,SAApE,EAA6E;UACrFtB,OAAO,EAAEA,OAD4E;UAErFmB,MAAM,EAAE,MAF6E;UAGrFC,IAAI,EAAEC,IAAI,CAACvB,SAAL,CAAe;YAACyB,IAAI,EAAEN;UAAP,CAAf;QAH+E,CAA7E,CAAZ;MAMH,CAdM,CAAP;IAeH,CAnBM,CAAP;EAoBH;;AA5EW,CAAhB;AAoFA,eAAetC,OAAf"},"metadata":{},"sourceType":"module"}