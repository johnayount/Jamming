{"ast":null,"code":"const clientId = '3f8581efcf054bc186cdc88d963edde3';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for access token\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=\n            token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(searchItem) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchItem}`, {\n      headers: headers\n    }).then(response => {\n      // converting response to json \n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks)\n        /* checks if there are no tracks */\n        {\n          return [];\n        }\n      /* else it will convert json to an array of tracks */\n\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","searchItem","headers","Authorization","fetch","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/Users/johnyount/Desktop/coding-projects/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId = '3f8581efcf054bc186cdc88d963edde3'\nconst redirectUri = 'http://localhost:3000/'\nlet accessToken;\n\n\nconst Spotify = {\n    \n    getAccessToken(){\n        if(accessToken){\n            return accessToken;\n        }\n\n        // check for access token\n        const accessTokenMatch= window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch= window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            \n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\nwindow.history.pushState('Access Token', null, '/');\n                return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=\n            token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n    search(searchItem) {\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchItem}`, \n            { headers: headers }\n            ).then(response => {\n                // converting response to json \n                return response.json()\n            }).then(jsonResponse => {\n                if (!jsonResponse.tracks) /* checks if there are no tracks */ {\n                    return [];\n                } /* else it will convert json to an array of tracks */\n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }));\n            });\n    },\n    savePlaylist(name, trackUris) {\n        if(!name || !trackUris){\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me',{headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId=jsonResponse.id;\n            return fetch(`https://api.spotify.com/1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId= jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                }\n                )\n            })\n        })\n    }\n\n    \n\n\n\n}\n\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}